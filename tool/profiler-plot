#!/usr/bin/env python3

import matplotlib.pyplot as plot
import sys
import itertools
from matplotlib.transforms import TransformedBbox, Bbox
import collections
import argparse
from profilerlib import Profile, Scope, Instance

dpi=100

parser = argparse.ArgumentParser(prog="profiler-plot")
parser.add_argument("-s", "--show", action='store_true',
                    help="Show Plot in a GUI.")
parser.add_argument("-o", "--output", action='append', #nargs='*',
                    help="Save plot to file. The file ending determinates the file type")
parser.add_argument("-i", "--input", required=True,
                    help="Input is a state file for plotting")
args = parser.parse_args()

profile = Profile()
profile.load(args.input)
sorted_scopes = profile.getsorted()


# top border above the plot
border_top_height = 10/dpi

# bottom border below the plot
border_bottom_height = 50/dpi

# the plot is split in rows. Every function is plotted in a seperate row. A
# duration bar is drawn for every function call.
# row: function name
# bar: function call
plot_row_height = 20/dpi
plot_height = plot_row_height*len(sorted_scopes)

# the total size of the figure, including borders and plot.
fig_height = plot_height + border_bottom_height + border_top_height
fig_width = 20

# create a new matplotlib figure
fig = plot.figure(figsize=(20, fig_height), dpi=dpi)
ax = plot.subplot()
    

# The row is a little bit bigger than the bars which are inside. There is a
# horizontal space of 2 between every bar. The text is drawn behind the last
# bar with a padding of 5.
row_y_position = 0
row_height = 10
bar_height = 8
text_space = 5
# iterate over all functions and draw their bars.
#for name, triplets in functions_sorted_by_start:
for scope in sorted_scopes:  
    bar_y_position = row_y_position+(row_height-bar_height)/2
    
    times = [(instance.start, instance.duration) for instance in scope]
    colors = [instance.color for instance in scope]
    ax.broken_barh( times, (bar_y_position, bar_height), facecolors=colors)

    # Some functions are called often and have a short runtime. Therefore
    # only the average of runtime is written behind the last bar.
    text_x_position = scope[-1].stop + text_space
    text_y_position = bar_y_position + bar_height/2
    text = '{} us'.format(scope.average)
    ax.text(text_x_position, text_y_position, text,
            horizontalalignment='left',
            verticalalignment='center',
            fontsize=8)

    # plotting of scope is done. Move down to next scope in plot.
    row_y_position += row_height


ax.set_yticks( [k*row_height+row_height/2 for k in range(len(sorted_scopes))])
ax.set_yticklabels( [scope.pretty for scope in sorted_scopes], fontsize=8)
ax.grid(True)
ax.set_xlabel('microseconds (us) since start')    
plot.subplots_adjust(left=0.3, right=0.95, top=1-border_top_height/fig_height, bottom=border_bottom_height/fig_height)

# save plot to files
if args.output:
    for output in args.output:
        plot.savefig(output, dpi=100)

# show plot
if args.show:
    plot.show()
